import logging
from datetime import datetime
from django.http import HttpResponseForbidden, HttpResponse
from django.utils import timezone # Import timezone for timezone-aware datetime

# Get an instance of a logger
# This logger will be configured in settings.py to write to 'requests.log'
request_logger = logging.getLogger('request_logger')

class RequestLoggingMiddleware:
    """
    Custom middleware to log details of each incoming request.
    Logs timestamp, authenticated user (or 'Anonymous'), and the request path.
    """
    def __init__(self, get_response):
        """
        Initializes the middleware.
        Args:
            get_response: The next middleware or the view function in the chain.
        """
        self.get_response = get_response

    def __call__(self, request):
        """
        Processes each request and logs its details before passing it to the next middleware/view.
        Args:
            request: The HttpRequest object.
        Returns:
            HttpResponse: The response generated by the subsequent middleware or view.
        """
        # Determine the user for logging
        # request.user will be an instance of your custom User model or AnonymousUser
        user = request.user.username if request.user.is_authenticated else 'Anonymous'

        # Log the request information
        log_message = f"{datetime.now()} - User: {user} - Path: {request.path}"
        request_logger.info(log_message)

        # Call the next middleware or view in the chain to get the response
        response = self.get_response(request)

        # You can add post-response logging here if needed, but the task only specifies request logging.
        return response


class RestrictAccessByTimeMiddleware:
    """
    Custom middleware to restrict access to the application based on the time of day.
    Access is denied between 9 PM (21:00) and 6 AM (06:00) server time.
    """
    def __init__(self, get_response):
        """
        Initializes the middleware.
        Args:
            get_response: The next middleware or the view function in the chain.
        """
        self.get_response = get_response

    def __call__(self, request):
        """
        Checks the current server time and denies access if it's outside
        the allowed hours (6 AM to 9 PM).
        Args:
            request: The HttpRequest object.
        Returns:
            HttpResponse: A Forbidden response if outside allowed hours,
                          otherwise the response from the next middleware/view.
        """
        current_time = timezone.now() # Get timezone-aware current time
        current_hour = current_time.hour

        # Define the restricted hours: 9 PM (21:00) to 6 AM (06:00)
        # Access is allowed between 6 AM (inclusive) and 9 PM (exclusive)
        # So, deny if current_hour is 21, 22, 23, 0, 1, 2, 3, 4, 5
        if current_hour >= 21 or current_hour < 6:
            # Log the forbidden access attempt (optional, but good for auditing)
            user = request.user.username if request.user.is_authenticated else 'Anonymous'
            request_logger.warning(
                f"Access denied for {user} at {current_time.strftime('%Y-%m-%d %H:%M:%S')} "
                f"to {request.path} due to time restriction."
            )
            return HttpResponseForbidden("Access to the messaging app is restricted between 9 PM and 6 AM.")

        # If within allowed hours, proceed to the next middleware or view
        response = self.get_response(request)
        return response

class OffensiveLanguageMiddleware:
    """
    Middleware to limit the number of chat messages a user can send
    within a specific time window, based on their IP address.
    """
    def __init__(self, get_response):
        """
        Initializes the middleware.
        `get_response` is the next callable in the middleware chain.
        """
        self.get_response = get_response
        # This dictionary will store the request timestamps for each IP address.
        # Key: IP address (str)
        # Value: List of timestamps (floats)
        self.request_tracker = {}
        # The rate limit is 5 requests per 60 seconds.
        self.limit = 5
        self.time_window = 60 # seconds

    def __call__(self, request):
        """
        Middleware's core logic.
        This method is called for every request.
        """
        # We only want to track POST requests, which simulate a new chat message.
        if request.method == 'POST':
            # Get the client's IP address.
            # We check HTTP_X_FORWARDED_FOR for requests behind a proxy.
            ip_address = request.META.get('HTTP_X_FORWARDED_FOR')
            if ip_address:
                # HTTP_X_FORWARDED_FOR can be a comma-separated list of IPs.
                # The first one is the client's IP.
                ip_address = ip_address.split(',')[0].strip()
            else:
                ip_address = request.META.get('REMOTE_ADDR')

            if ip_address:
                # Get the current time in seconds since the epoch.
                current_time = time.time()

                # If the IP address is not in our tracker, add it.
                if ip_address not in self.request_tracker:
                    self.request_tracker[ip_address] = []
                
                # Filter out any timestamps that are older than our time window.
                # This ensures we only count messages from the last minute.
                self.request_tracker[ip_address] = [
                    t for t in self.request_tracker[ip_address]
                    if current_time - t <= self.time_window
                ]
                
                # Check if the number of requests in the time window exceeds the limit.
                if len(self.request_tracker[ip_address]) >= self.limit:
                    # If the limit is exceeded, return an HTTP 429 response.
                    # This tells the user they have sent too many requests.
                    return HttpResponse(
                        "Rate limit exceeded. Please wait a moment before sending another message.",
                        status=429
                    )
                else:
                    # If the limit is not exceeded, add the current request's
                    # timestamp to the tracker for this IP.
                    self.request_tracker[ip_address].append(current_time)

        # Pass the request to the next middleware or view.
        response = self.get_response(request)
        return response