import logging
from datetime import datetime

# Get an instance of a logger
# This logger will be configured in settings.py to write to 'requests.log'
request_logger = logging.getLogger('request_logger')

class RequestLoggingMiddleware:
    """
    Custom middleware to log details of each incoming request.
    Logs timestamp, authenticated user (or 'Anonymous'), and the request path.
    """
    def __init__(self, get_response):
        """
        Initializes the middleware.
        Args:
            get_response: The next middleware or the view function in the chain.
        """
        self.get_response = get_response

    def __call__(self, request):
        """
        Processes each request and logs its details before passing it to the next middleware/view.
        Args:
            request: The HttpRequest object.
        Returns:
            HttpResponse: The response generated by the subsequent middleware or view.
        """
        # Determine the user for logging
        # request.user will be an instance of your custom User model or AnonymousUser
        user = request.user.username if request.user.is_authenticated else 'Anonymous'

        # Log the request information
        log_message = f"{datetime.now()} - User: {user} - Path: {request.path}"
        request_logger.info(log_message)

        # Call the next middleware or view in the chain to get the response
        response = self.get_response(request)

        # You can add post-response logging here if needed, but the task only specifies request logging.
        return response

